<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WSP Game Development ChatBot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        #response {
            margin-top: 20px;
            padding: 10px;
            min-height: 50px;
        }
        #response h3 {
            color: #333;
            font-size: 1.2em;
        }
        #response strong {
            color: #d9534f;
        }
        #response ul {
            padding-left: 20px;
        }
        #response li {
            margin-bottom: 5px;
        }
        #gamePreview {
            margin-top: 20px;
            border: 1px solid #ddd;
            padding: 15px;
        }
        .preview-container {
            display: flex;
        }
        .code-preview {
            width: 50%;
            background-color: #f4f4f4;
            padding: 10px;
            overflow-x: auto;
        }
        .game-iframe {
            width: 50%;
            height: 500px;
            border: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Game Development ChatBot</h2>
        <div class="form-group">
            <input
                type="text"
                class="form-control"
                id="userInput"
                placeholder="Enter your game development prompt" />
        </div>
        <button class="btn btn-success" onclick="sendMessage()">Generate!</button>
        
        <div id="response"></div>
        <div id="gamePreview" style="display:none;">
            <div class="preview-container">
                <div class="code-preview" id="codePreview"></div>
                <iframe class="game-iframe" id="gameIframe"></iframe>
            </div>
        </div>
    </div>

    <script>

        async function sendMessage() {
            const input = document.getElementById('userInput').value;
            const responseDiv = document.getElementById('response');
            const gamePreviewDiv = document.getElementById('gamePreview');
            const codePreviewDiv = document.getElementById('codePreview');
            const gameIframe = document.getElementById('gameIframe');

            if (!input) {
                responseDiv.innerHTML = 'Please enter a message.';
                return;
            }

            responseDiv.innerHTML = 'Loading...';
            gamePreviewDiv.style.display = 'none';

            try {
                const response = await fetch(
                    'https://openrouter.ai/api/v1/chat/completions',
                    {
                        method: 'POST',
                        headers: {
                            Authorization: 'Bearer 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',
                            'HTTP-Referer': 'https://www.webstylepress.com',
                            'X-Title': 'WebStylePress',
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            model: 'deepseek/deepseek-r1:free',
                            messages: [
                                { 
                                    role: 'system', 
                                    content: 'You are a game development assistant. When asked to create a game, provide a detailed explanation and include an HTML/JavaScript game code snippet.' 
                                },
                                { role: 'user', content: input }
                            ],
                        }),
                    },
                );

                const data = await response.json();
                const markdownText = data.choices?.[0]?.message?.content || 'No response received.';
                
                // Parse Markdown response
                responseDiv.innerHTML = marked.parse(markdownText);

                // Check if game code is in the response
                const gameMatch = markdownText.match(/```html([\s\S]*?)```/);
                
                if (gameMatch) {
                    const gameCode = gameMatch[1].trim();
                    
                    // Display game preview
                    codePreviewDiv.innerHTML = `<pre><code>${gameCode}</code></pre>`;
                    gameIframe.srcdoc = gameCode;
                    gamePreviewDiv.style.display = 'block';
                } else {
                    // If no game code found, check for predefined templates
                    const templateMatch = Object.keys(gameTemplates).find(key => 
                        input.toLowerCase().includes(key)
                    );

                    if (templateMatch) {
                        const selectedGame = gameTemplates[templateMatch];
                        codePreviewDiv.innerHTML = `<pre><code>${selectedGame.code}</code></pre>`;
                        gameIframe.srcdoc = selectedGame.code;
                        gamePreviewDiv.style.display = 'block';
                    }
                }
            } catch (error) {
                responseDiv.innerHTML = 'Error: ' + error.message;
            }
        }
    </script>
</body>
</html>